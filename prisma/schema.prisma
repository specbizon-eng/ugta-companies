// ---------- Prisma Client ----------
generator client {
  provider = "prisma-client-js"
}

// ---------- Datasource ----------
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------
enum Role {
  CLIENT
  STAFF
  ADMIN
  MOD
}

enum ChatPenalty  {
  NONE
  MUTE
  BAN
}

enum ListingStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ContractStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum VehicleStatus {
  AVAILABLE
  RESERVED
  RENTED
  MAINTENANCE
}

// ---------- Core Models ----------
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  passwordHash  String
  name          String
  role          Role     @default(CLIENT)
  balanceCents  Int      @default(0)
  ipHash        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  clientContracts Contract[] @relation("ClientContracts")
  lawyerContracts Contract[] @relation("LawyerContracts")
  bookings        Booking[]
  ledgerEntries   BalanceLedger[] @relation("UserToLedger")
  lawyerProfile   LawyerProfile?
  lawyerApp       LawyerApplication?
  companiesOwned  TransportCompany[] @relation("CompanyOwner")
}

model BalanceLedger {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation("UserToLedger", fields: [userId], references: [id])
  deltaCents Int
  note       String
  createdAt  DateTime @default(now())

  @@index([userId])
}

model ChatModeration {
  id        String      @id @default(cuid())
  targetId  String?
  ipHash    String?
  penalty   ChatPenalty @default(NONE)
  reason    String?
  expiresAt DateTime?
  createdAt DateTime    @default(now())
}

// ---------- Legal ----------
model LawyerProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  licenseNo String?
  licenseAt DateTime?
  bio       String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
}

model LawyerApplication {
  id        String        @id @default(cuid())
  userId    String        @unique
  user      User          @relation(fields: [userId], references: [id])
  fullName  String
  licenseNo String?
  message   String?
  status    ListingStatus @default(PENDING)
  createdAt DateTime      @default(now())
}

model Contract {
  id          String         @id @default(cuid())

  userId      String
  user        User           @relation("ClientContracts", fields: [userId], references: [id])

  lawyerId    String
  lawyer      User           @relation("LawyerContracts", fields: [lawyerId], references: [id])

  title       String
  body        String
  status      ContractStatus @default(PENDING)
  activeUntil DateTime?
  fileUrl     String?
  reviewerId  String?

  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([userId])
  @@index([lawyerId])
}

// ---------- Market ----------
model MarketCategory {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  order     Int      @default(0)
  createdAt DateTime @default(now())

  items     MarketItem[]
}

model MarketItem {
  id          String         @id @default(cuid())
  userId      String
  user        User           @relation(fields: [userId], references: [id])

  categoryId  String
  category    MarketCategory @relation(fields: [categoryId], references: [id])

  title       String
  description String
  priceCents  Int?
  contact     String?        // Discord / Telegram
  photos      Json           // масив URLів
  status      ListingStatus  @default(PENDING)

  createdAt   DateTime       @default(now())

  @@index([userId])
  @@index([categoryId])
}

// ---------- Transport / Trucks ----------
model TransportCompany {
  id          String   @id @default(cuid())
  ownerUserId String
  owner       User     @relation("CompanyOwner", fields: [ownerUserId], references: [id])
  name        String
  garageInfo  String?
  bonuses     String?
  members     Int      @default(0)
  createdAt   DateTime @default(now())

  trucks      Truck[]

  @@index([ownerUserId])
}

model Truck {
  id               String           @id @default(cuid())

  companyId        String
  company          TransportCompany @relation(fields: [companyId], references: [id])

  title            String
  description      String?
  photoUrl         String?
  docUrl           String?
  status           VehicleStatus    @default(AVAILABLE)
  pricePerDayCents Int              @default(0)

  createdAt        DateTime         @default(now())
  bookings         Booking[]

  @@index([companyId])
}

model Booking {
  id        String   @id @default(cuid())

  truckId   String
  truck     Truck    @relation(fields: [truckId], references: [id])

  userId    String
  user      User     @relation(fields: [userId], references: [id])

  from      DateTime
  to        DateTime
  createdAt DateTime @default(now())

  @@index([truckId])
  @@index([userId])
}
